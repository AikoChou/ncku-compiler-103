S
S                   int                 Program $           
S                   char                Program $           
S                   double              Program $           
S                   float               Program $           
Program             int                 DeclList            
Program             char                DeclList            
Program             double              DeclList            
Program             float               DeclList            
Program             $                   DeclList            
DeclList            int                 DeclList' DeclList  
DeclList            char                DeclList' DeclList  
DeclList            double              DeclList' DeclList  
DeclList            float               DeclList' DeclList  
DeclList            $                   ε                  
DeclList'           int                 Type id Decl        
DeclList'           char                Type id Decl        
DeclList'           double              Type id Decl        
DeclList'           float               Type id Decl        
Decl                ;                   VarDecl'            
Decl                (                   FunDecl             
Decl                [                   VarDecl'            
VarDecl             int                 Type id VarDecl'    
VarDecl             char                Type id VarDecl'    
VarDecl             double              Type id VarDecl'    
VarDecl             float               Type id VarDecl'    
VarDecl'            ;                   ;                   
VarDecl'            [                   [ num ] ;           
FunDecl             (                   ( ParamDeclList ) Block
VarDeclList         int                 VarDecl VarDeclList 
VarDeclList         char                VarDecl VarDeclList 
VarDeclList         double              VarDecl VarDeclList 
VarDeclList         float               VarDecl VarDeclList 
VarDeclList         num                 ε                  
VarDeclList         id                  ε                  
VarDeclList         return              ε                  
VarDeclList         break               ε                  
VarDeclList         if                  ε                  
VarDeclList         while               ε                  
VarDeclList         print               ε                  
VarDeclList         ;                   ε                  
VarDeclList         -                   ε                  
VarDeclList         !                   ε                  
VarDeclList         (                   ε                  
VarDeclList         {                   ε                  
ParamDeclList       int                 ParamDeclListTail   
ParamDeclList       char                ParamDeclListTail   
ParamDeclList       double              ParamDeclListTail   
ParamDeclList       float               ParamDeclListTail   
ParamDeclList       )                   ε                  
ParamDeclListTail   int                 ParamDecl ParamDeclListTail'
ParamDeclListTail   char                ParamDecl ParamDeclListTail'
ParamDeclListTail   double              ParamDecl ParamDeclListTail'
ParamDeclListTail   float               ParamDecl ParamDeclListTail'
ParamDeclListTail'  ,                   , ParamDeclListTail 
ParamDeclListTail'  )                   ε                  
ParamDecl           int                 Type id ParamDecl'  
ParamDecl           char                Type id ParamDecl'  
ParamDecl           double              Type id ParamDecl'  
ParamDecl           float               Type id ParamDecl'  
ParamDecl'          ,                   ε                  
ParamDecl'          )                   ε                  
ParamDecl'          [                   [ ]                 
Block               {                   { VarDeclList StmtList }
Type                int                 int                 
Type                char                char                
Type                double              double              
Type                float               float               
StmtList            num                 Stmt StmtList'      
StmtList            id                  Stmt StmtList'      
StmtList            return              Stmt StmtList'      
StmtList            break               Stmt StmtList'      
StmtList            if                  Stmt StmtList'      
StmtList            while               Stmt StmtList'      
StmtList            print               Stmt StmtList'      
StmtList            ;                   Stmt StmtList'      
StmtList            -                   Stmt StmtList'      
StmtList            !                   Stmt StmtList'      
StmtList            (                   Stmt StmtList'      
StmtList            {                   Stmt StmtList'      
StmtList'           num                 StmtList            
StmtList'           id                  StmtList            
StmtList'           return              StmtList            
StmtList'           break               StmtList            
StmtList'           if                  StmtList            
StmtList'           while               StmtList            
StmtList'           print               StmtList            
StmtList'           ;                   StmtList            
StmtList'           -                   StmtList            
StmtList'           !                   StmtList            
StmtList'           (                   StmtList            
StmtList'           {                   StmtList            
StmtList'           }                   ε                  
Stmt                num                 Expr ;              
Stmt                id                  Expr ;              
Stmt                return              return Expr ;       
Stmt                break               break ;             
Stmt                if                  if ( Expr ) Stmt else Stmt
Stmt                while               while ( Expr ) Stmt 
Stmt                print               print id ;          
Stmt                ;                   ;                   
Stmt                -                   Expr ;              
Stmt                !                   Expr ;              
Stmt                (                   Expr ;              
Stmt                {                   Block               
Expr                num                 num Expr'           
Expr                id                  id ExprIdTail       
Expr                -                   UnaryOp Expr        
Expr                !                   UnaryOp Expr        
Expr                (                   ( Expr ) Expr'      
ExprIdTail          ;                   Expr'               
ExprIdTail          ,                   Expr'               
ExprIdTail          -                   Expr'               
ExprIdTail          (                   ( ExprList ) Expr'  
ExprIdTail          )                   Expr'               
ExprIdTail          [                   [ Expr ] ExprArrayTail
ExprIdTail          ]                   Expr'               
ExprIdTail          +                   Expr'               
ExprIdTail          *                   Expr'               
ExprIdTail          /                   Expr'               
ExprIdTail          =                   = Expr              
ExprIdTail          ==                  Expr'               
ExprIdTail          !=                  Expr'               
ExprIdTail          <                   Expr'               
ExprIdTail          <=                  Expr'               
ExprIdTail          >                   Expr'               
ExprIdTail          >=                  Expr'               
ExprIdTail          &&                  Expr'               
ExprIdTail          ||                  Expr'               
ExprArrayTail       ;                   Expr'               
ExprArrayTail       ,                   Expr'               
ExprArrayTail       -                   Expr'               
ExprArrayTail       )                   Expr'               
ExprArrayTail       ]                   Expr'               
ExprArrayTail       +                   Expr'               
ExprArrayTail       *                   Expr'               
ExprArrayTail       /                   Expr'               
ExprArrayTail       =                   = Expr              
ExprArrayTail       ==                  Expr'               
ExprArrayTail       !=                  Expr'               
ExprArrayTail       <                   Expr'               
ExprArrayTail       <=                  Expr'               
ExprArrayTail       >                   Expr'               
ExprArrayTail       >=                  Expr'               
ExprArrayTail       &&                  Expr'               
ExprArrayTail       ||                  Expr'               
Expr'               ;                   ε                  
Expr'               ,                   ε                  
Expr'               -                   BinOp Expr          
Expr'               )                   ε                  
Expr'               ]                   ε                  
Expr'               +                   BinOp Expr          
Expr'               *                   BinOp Expr          
Expr'               /                   BinOp Expr          
Expr'               ==                  BinOp Expr          
Expr'               !=                  BinOp Expr          
Expr'               <                   BinOp Expr          
Expr'               <=                  BinOp Expr          
Expr'               >                   BinOp Expr          
Expr'               >=                  BinOp Expr          
Expr'               &&                  BinOp Expr          
Expr'               ||                  BinOp Expr          
ExprList            num                 ExprListTail        
ExprList            id                  ExprListTail        
ExprList            -                   ExprListTail        
ExprList            !                   ExprListTail        
ExprList            (                   ExprListTail        
ExprList            )                   ε                  
ExprList            <=                  Expr'               
ExprListTail        num                 Expr ExprListTail'  
ExprListTail        id                  Expr ExprListTail'  
ExprListTail        -                   Expr ExprListTail'  
ExprListTail        !                   Expr ExprListTail'  
ExprListTail        (                   Expr ExprListTail'  
ExprListTail'       ,                   , ExprListTail      
ExprListTail'       )                   ε                  
UnaryOp             -                   -                   
UnaryOp             !                   !                   
BinOp               -                   -                   
BinOp               +                   +                   
BinOp               *                   *                   
BinOp               /                   /                   
BinOp               ==                  ==                  
BinOp               !=                  !=                  
BinOp               <                   <                   
BinOp               <=                  <=                  
BinOp               >                   >                   
BinOp               >=                  >=                  
BinOp               &&                  &&                  
BinOp               ||                  ||                  
